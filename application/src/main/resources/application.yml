#spring:
#  application:
#    name: orders-service
#  jpa:
#    hibernate:
#      ddl-auto: update
#    show-sql: true
#  datasource:
#    url: jdbc:postgresql://localhost:5434/db_orders?useSSL=false
#    username: fazt3
#    password: 123456
#  kafka:
#    bootstrap-servers: localhost:9092,localhost:9094,localhost:9096
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      acks: all
#      properties:
#        delivery.timeout.ms: 120000
#        linger.ms: 0
#        request.timeout.ms: 30000
#        max.in.flight.requests.per.connection: 5
#        enable.idempotence: true
#    consumer:
#        group-id: orders-ms-angieBraids
#        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#        value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#        properties:
#            spring.json.trusted.packages: 'com.braidsbeautybyangie.*'
#
#orders:
#  events:
#    topic:
#      name: orders-events
#  commands:
#    topic:
#      name: orders-commands
#products:
#  commands:
#    topic:
#      name: products-commands
#  events:
#    topic:
#      name: products-events
#payments:
#  commands:
#    topic:
#      name: payments-commands
#  events:
#    topic:
#      name: payments-events
#services:
#  events:
#    topic:
#      name: services-events
#  commands:
#    topic:
#      name: services-commands
#
#
#server:
#  port: 0
#
#eureka:
#  instance:
#    instance-id: ${spring.application.name}:${random.value}
#
#swagger:
#  server:
#    url: http://localhost:${eureka.instance.instance-id}
#springdoc:
#  api-docs:
#    enabled: true
#  swagger-ui:
#    csrf:
#      enabled: true
#    path: /swagger-ui.html
#
resilience4j:
  retry:
    configs:
      default:
        max-attempts: 3 #Numero de intentos que se realizaran antes de mandar un error
        wait-duration: 2s #Tiempo de espera entre cada intento como maximo
    instances:
      payment-service:
        base-config: default

  circuitbreaker:
    configs:
      default:
        sliding-window-size: 5 #Tamano de la ventana que nos ayuda a validar el monitoreo de fallas y exitos en el circuit breaker, en este caso calculara entre 5 peticiones el nivel de exito y falla
        failure-rate-threshold: 50 #Porcentaje de fallas que se permiten antes de abrir el circuit breaker/ de las 5 solicitudes si 3 vienen con respuesta erronea, pasara de estado closed a open
        permitted-number-of-calls-in-half-open-state: 3 #Numero de peticiones permitidas en el estado half-open, ya que es un estado de prueba
        wait-duration-in-open-state: 10s #Tiempo que se espera para volver a mandar la peticion en el estado half-open
        register-health-indicator: true #Habilita el monitoreo de la salud del circuit breaker
        automatic-transition-from-open-to-half-open-enabled: true #Habilita la transicion automatica de open a half-open
        sliding-window-type: COUNT_BASED #Tipo de ventana que se utilizara para el monitoreo, se vasa en contar cada peticion
    instances:
      payment-service:
        base-config: default
  timelimiter:
    instances:
      payment-service:
        timeout-duration: 6s #Tiempo maximo de espera para la respuesta de la peticion
        cancel-running-future: true #Cancela la peticion si se excede el tiempo de espera
#  ratelimiter:
#    configs:
#      default:
#        limit-for-period: 10 #Numero de peticiones permitidas en el periodo de tiempo
#        limit-refresh-period: 60s #Tiempo de espera para volver a realizar las peticiones
#        timeout-duration: 3s #Tiempo de espera para la respuesta de la peticion
#        register-health-indicator: true #Habilita el monitoreo de la salud del rate limiter
#    instances:
#      payment-service:
#        base-config: default
